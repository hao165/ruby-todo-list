<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <%= csrf_meta_tags %>
  <title>TODO List</title>
  <!-- 引入 Tailwind CSS -->
  <script src="https://cdn.tailwindcss.com"></script>
  <!-- 引入 Vue 3 -->
  <script src="https://cdn.jsdelivr.net/npm/vue@3.2.47/dist/vue.global.prod.js"></script>
</head>
<body class="bg-gray-100">
    <div id="app" class="container mx-auto p-4">
        <h1 class="text-2xl font-bold text-center mb-4">TODO List</h1>

        <!-- 顯示錯誤訊息 -->
        <p v-if="error" class="text-red-500 text-center">{{ error }}</p>

        <!-- 加載 TODO 項目時顯示 loading 狀態 -->
        <div v-if="loading" class="text-center">Loading...</div>

        <!-- TODO 項目輸入欄位 -->
        <div class="flex justify-center mb-4">
            <input v-model="newTodoTitle" type="text" placeholder="Enter new todo..." class="border rounded px-4 py-2" />
            <button @click="createTodo" class="ml-2 px-4 py-2 bg-blue-500 text-white rounded">Add</button>
        </div>

        <!-- TODO 項目列表 -->
        <ul>
            <li v-for="todo in todos" :key="todo.id" class="flex justify-between items-center mb-2 p-2 bg-white rounded shadow">
            <span :class="{'line-through text-gray-500': todo.completed}" class="flex-1">{{ todo.title }}</span>
            
            <button @click="toggleTodoStatus(todo)" class="px-4 py-2 bg-green-500 text-white rounded mr-2">
                {{ todo.completed ? 'Undo' : 'Complete' }}
            </button>
            
            <button @click="deleteTodo(todo.id)" class="px-4 py-2 bg-red-500 text-white rounded">
                Delete
            </button>
            </li>
        </ul>
    </div>
    
    <script>
        const csrfToken = document.querySelector("meta[name='csrf-token']").getAttribute("content");

        const app = Vue.createApp({
            data() {
                return {
                    todos: [],
                    newTodoTitle: '',
                    loading: false,
                    error: null,
                };
            },
            methods: {
                // 加載 TODO 項目
                async loadTodos() {
                    try {
                        this.loading = true;
                        const response = await fetch('http://localhost:3000/api/todos', {
                            method: 'GET',
                            headers: {
                                'Content-Type': 'application/json',
                                'Authorization': `Bearer ${localStorage.getItem('token')}`
                            },
                        });
                        const data = await response.json();
                        if (response.status === 401) {
                            this.error = data.error;
                            localStorage.removeItem('token');
                            window.location.replace('/auth/login');
                            return;
                        }

                        this.todos = data;
                    } catch (err) {
                        this.error = 'Failed to fetch todos';
                    } finally {
                        this.loading = false;
                    }
                },
                // 創建新的 TODO 項目
                async createTodo() {
                    try {
                        if (!this.newTodoTitle) return; // 防止創建空白 TODO
                        const response = await fetch('http://localhost:3000/api/todos', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'X-CSRF-Token': csrfToken,
                                'Authorization': `Bearer ${localStorage.getItem('token')}`
                            },
                            body: JSON.stringify({
                                title: this.newTodoTitle,
                                completed: false,
                            }),
                        });
                        const newTodo = await response.json();
                        this.todos.push(newTodo); // 更新 TODO 列表
                        this.newTodoTitle = ''; // 清空輸入框
                    } catch (err) {
                        this.error = 'Failed to create todo';
                    }
                },
                // 更新 TODO 項目狀態
                async toggleTodoStatus(todo) {
                    try {
                        const response = await fetch(`http://localhost:3000/api/todos/${todo.id}`, {
                            method: 'PUT',
                            headers: {
                                'Content-Type': 'application/json',
                                'X-CSRF-Token': csrfToken,
                                'Authorization': `Bearer ${localStorage.getItem('token')}`
                            },
                            body: JSON.stringify({
                                title: todo.title,
                                completed: !todo.completed,
                            }),
                        });
                        const updatedTodo = await response.json();
                        todo.completed = updatedTodo.completed;
                    } catch (err) {
                        this.error = 'Failed to update todo';
                    }
                },
                // 刪除 TODO 項目
                async deleteTodo(todoId) {
                    try {
                        const response = await fetch(`http://localhost:3000/api/todos/${todoId}`, {
                            method: 'DELETE',
                            headers: {
                                'X-CSRF-Token': csrfToken,
                                'Authorization': `Bearer ${localStorage.getItem('token')}`
                            },
                        });
                        if (response.ok) {
                            this.todos = this.todos.filter(todo => todo.id !== todoId); // 刪除項目
                        }
                    } catch (err) {
                        this.error = 'Failed to delete todo';
                    }
                },
            },
            created() {
                this.loadTodos(); // 加載 TODO 項目
            },
        });

        app.mount('#app');
    </script>
</body>
</html>
